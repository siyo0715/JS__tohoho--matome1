＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿プロパティ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
オブジェクトは、値を参照したり設定するためのプロパティ(属性)を持ちます。
例えば navigator オブジェクトは、appName や appVersion などのプロパティを持ちます。

navigator.appName       // ブラウザの名前
navigator.appVersion    // ブラウザのバージョン
____________________________________________________________________________________

________________________________メソッド_____________________________________________
オブジェクトはまた、動作を指定する際に用いるメソッド(処理)をサポートしています。
例えば window オブジェクトは、alert() や open() などのメソッドを持ちます。

window.alert("Hello");            // 警告ダイアログを表示する
window.open("xx.html", "_blank"); // 新しくウィンドウを開いて表示する

____________________________________________________________________________________

__________________________________変数_______________________________________________

変数は、名前のついた箱のようなもので、
中に数値や文字列などの値を保持することができます。
下記の例は、「x は 5 に等しい。」という意味ではなく、
「x という名前の変数に 5 という値を代入する。」という意味を持ちます。

x = 5;      // x という変数に 5 を代入する

○ count_of_today = 123;
○ abc123 = 123;
× 123abc = 123;           // 数字で始まっているので使用不可
× if = 123;               // if は予約語なので使用不可
○ if_while = 123;
△ 年齢 = 123;

大文字と小文字は別の変数とみなされます。下記の例では、name と Name は別の変数として扱われます。

name = "山田太郎";
Name = "田中次郎";
_____________________________________________________________________________________

________________________________予約語________________________________________________

JavaScript の予約語には下記などがあります。
一部はまだ将来のための予約語ですが、変数名や関数名としては使用しないようにしてください。

await, break, case, catch, class, const, continue, debugger, default, delete, do,
 else, enum, export, extends, false, finally, for, function, if, import, implements,
  in, instanceof, interface, let, new, null, package, private, protected, public, return,
   static, super, switch, this, throw, true, try, typeof, var, void, while, with, yield

_______________________________________________________________________________________

_____________________________ストリクトモード(strict)_____________________________________
ES5 ではストリクトモードがサポートされました。
通常ではエラーとならないコードに対してエラーを発生させることにより、
プログラミングのミスを見つけやすくします。ストリクトモードにするには、
プログラムの一番先頭に "use strict" という文字列を記述します。

"use strict";
// 通常の JavaScript プログラム

function func(x, y) {
  "use strict";
  // 通常の JavaScript プログラム

// 未定義の変数に対する代入
x = 5;

// 書き込み禁止属性への代入
var obj1 = {};
Object.defineProperty(obj1, "x", { value: 42, writable: false });
obj1.x = 5;

// getter関数への代入
var obj2 = { get x() { return 17; } };
obj2.x = 5;

// 拡張禁止オブジェクトへの拡張
var obj3 = {};
Object.preventExtensions(obj3);
obj3.x = 5;

// 単純変数の削除
var x = 5;
delete x;

// 削除不可プロパティの削除
delete Object.prototype;

// 関数引数の重複
function func(x, x) { return x + x; }

// 0で始まる8進数の使用
x = 0755;

// with の使用
with (location) { href = url; }

// arguments.callee の使用
function func1() { func2() }
function func2() { console.log(arguments.callee); }
func1();


var x = 5;
var y = 5;
eval("var x = 8; x");
eval("'use strict'; var y = 8; y");
console.log(x);   // 8
console.log(y);   // 5
_______________________________________________________________________________________

